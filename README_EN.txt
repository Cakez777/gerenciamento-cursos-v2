This project is a fullstack application developed to manage courses, students, and enrollments, also allowing the generation of reports. The goal was to build a simple and functional platform that organizes this information in an intuitive and clear way. For this, I used Laravel for the backend and React.js for the frontend, both connected through a REST API.

The backend was developed in Laravel and is responsible for all business logic, authentication, and database integration. To simplify local setup, I used XAMPP, which provides an integrated Apache server and MySQL database. This setup allows easy management of the database and keeps the application running smoothly. The backend provides endpoints for creating, listing, editing, and deleting students, courses, and enrollments, as well as generating reports with performance information, such as revenue and the most popular courses.

The database used in this project can be created from the provided SQL file. It is located in the database/.sql folder within the repository and is named ranhentos_db.sql. To set up the database locally, open phpMyAdmin via XAMPP, create a new database (for example, ranhentos_db), and import the SQL file. This ensures that all the necessary tables and data for the application are already present, eliminating the need to create the database from scratch.

The frontend was implemented in React.js and is designed to be simple and user-friendly. It features a main page that centralizes the system options and redirects users to specific sections, such as registrations and reports. All communication with the backend is done through API requests, ensuring smooth integration between the two layers.

To run the project locally, you need to have XAMPP installed and running, with Apache and MySQL active. After cloning the repository, navigate to the backend folder, install dependencies with Composer, configure the Laravel .env file (including the imported database details), run migrations if necessary, and execute php artisan serve to start the server. For the frontend, go to the corresponding folder, run npm install and then npm start to launch the React server, which will be available at http://localhost:3000.

With this setup, the application becomes fully functional: the backend manages the data securely and consistently, while the frontend provides a visual interface for user interaction. This project was designed as a practical study to consolidate knowledge in Laravel, React, and system integration, while also demonstrating how to use tools like XAMPP and SQL files to accelerate local development.